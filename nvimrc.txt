call plug#begin('~/.vim/plugged')

Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-sensible'
Plug 'scrooloose/nerdtree',  { 'on': 'NERDTreeToggle' }
Plug 'kien/ctrlp.vim'
Plug 'rking/ag.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-haml'
Plug 'kassio/neoterm'
Plug 'terryma/vim-expand-region'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'kchmck/vim-coffee-script'
Plug 'cakebaker/scss-syntax.vim'
Plug 'ervandew/supertab'
Plug 'tpope/vim-endwise'
Plug 'isRuslan/vim-es6'
Plug 'nvie/vim-flake8'
Plug 'Valloric/YouCompleteMe'
Plug 'neomake/neomake'
Plug 'majutsushi/tagbar'
Plug 'fatih/vim-go'


call plug#end()


set clipboard=unnamed
set ignorecase
set number
colorscheme SpacegrayEighties
set t_Co=256
set cursorline
set expandtab
set tabstop=2
set shiftwidth=2
set mouse=a
set noswapfile
set modifiable

let g:ctrlp_custom_ignore = '\v[\/](\.git|\.hg|\.svn|node_modules|bower_components|tmp)$'

let NERDTreeIgnore = ['\.pyc$']
set statusline+=%f

" nerdtree shortcut
nnoremap <silent> <C-n> :NERDTreeToggle<cr>

" new tab shortcut
nnoremap <silent> <C-t> :tabnew<cr>

" Indent if we're at the beginning of a line. Else, do completion.
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" Show trailing whitespace:
:highlight ExtraWhitespace ctermbg=red guibg=red
:match ExtraWhitespace /\s\+$/
nnoremap <silent> ,h :match ExtraWhitespace /\s\+$/<cr>
" Make code selection easier with vvvvvvv
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
let g:ctrlp_use_caching = 0
" Make CtrP work much faster for autocompletion
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor

    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
else
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
  let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>'],
    \ }
endif

" neoterm config
let g:neoterm_position = 'horizontal'
let g:neoterm_automap_keys = ',tt'

" run set test lib
nnoremap <silent> ,rt :call neoterm#test#run('all')<cr>
nnoremap <silent> ,rf :call neoterm#test#run('file')<cr>
nnoremap <silent> ,rn :call neoterm#test#run('current')<cr>
nnoremap <silent> ,rr :call neoterm#test#rerun()<cr>

" Useful maps
" hide/close terminal
nnoremap <silent> ,th :call neoterm#close()<cr>
" clear terminal
nnoremap <silent> ,tl :call neoterm#clear()<cr>
" kills the current job (send a <c-c>)
nnoremap <silent> ,tc :call neoterm#kill()<cr>

" Rails commands
command! Troutes :T rake routes
command! -nargs=+ Troute :T rake routes | grep <args>
command! Tmigrate :T rake db:migrate

" tired of :W not comman
cnoreabbrev W w

" tired of pressing SHIFT ... ) :
nnoremap ; :

" Django setups

" PEP 8
autocmd FileType python map <buffer> ,pp :call Flake8()<CR>

" python tabs
autocmd FileType python set sw=4
autocmd FileType python set ts=4
autocmd FileType python set sts=4

" YCM options
let g:ycm_python_binary_path = '/usr/bin/python2.7'
let g:ycm_collect_identifiers_from_tags_files = 1 " Let YCM read tags from Ctags file
let g:ycm_use_ultisnips_completer = 1 " Default 1, just ensure
let g:ycm_seed_identifiers_with_syntax = 1 " Completion for programming language's keyword
let g:ycm_complete_in_comments = 1 " Completion in comments
let g:ycm_complete_in_strings = 1 " Completion in string

" Neomake
let g:neomake_python_enabled_makers = ['flake8', 'pep8', 'python']
" E501 is line length of 80 characters
let g:neomake_python_flake8_maker = {
    \'args': ['--ignore=E115,E266,E501'],
  \}
let g:neomake_python_pep8_maker = {
      \'args': ['--max-line-length=100', '--ignore=E115,E266'],
    \}
" run neomake on the current file on every write:
autocmd! BufWritePost * Neomake

let g:tagbar_autofocus=1
nmap <leader>tt :TagbarToggle<cr>
nnoremap <silent> ,tt :TagbarToggle<cr>

" go
let g:go_fmt_command = "goimports"

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

au FileType go nmap ,rt <Plug>(go-run-tab)
au FileType go nmap ,rb <Plug>(go-build)
au FileType go nmap ,rs <Plug>(go-run-split)
au FileType go nmap ,rv <Plug>(go-run-vertical)
